"""
@generated
cargo-raze generated Bazel file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

package(default_visibility = ["//visibility:public"])

licenses([
    "notice",  # See individual crates for specific licenses
])

# Aliased targets
alias(
    name = "cbindgen",
    actual = "@raze__cbindgen__0_18_0//:cbindgen",
    tags = [
        "cargo-raze",
        "manual",
    ],
)

alias(
    # Extra aliased target, from raze configuration
    # N.B.: The exact form of this is subject to change.
    name = "cargo_bin_cbindgen",
    actual = "@raze__cbindgen__0_18_0//:cargo_bin_cbindgen",
    tags = [
        "cargo-raze",
        "manual",
    ],
)

alias(
    name = "libc",
    actual = "@raze__libc__0_2_91//:libc",
    tags = [
        "cargo-raze",
        "manual",
    ],
)

alias(
    name = "rustls",
    actual = "@raze__rustls__0_19_0//:rustls",
    tags = [
        "cargo-raze",
        "manual",
    ],
)

alias(
    name = "rustls_native_certs",
    actual = "@raze__rustls_native_certs__0_5_0//:rustls_native_certs",
    tags = [
        "cargo-raze",
        "manual",
    ],
)

alias(
    name = "rustls_pemfile",
    actual = "@raze__rustls_pemfile__0_2_0//:rustls_pemfile",
    tags = [
        "cargo-raze",
        "manual",
    ],
)

alias(
    name = "sct",
    actual = "@raze__sct__0_6_0//:sct",
    tags = [
        "cargo-raze",
        "manual",
    ],
)

alias(
    name = "webpki",
    actual = "@raze__webpki__0_21_4//:webpki",
    tags = [
        "cargo-raze",
        "manual",
    ],
)

# Export file for Stardoc support
exports_files(
    [
        "crates.bzl",
    ],
    visibility = ["//visibility:public"],
)

genrule(
    name = "cargo_metadata",
    srcs = [
        "Cargo.toml",
        "Cargo.lock",
        "//src:rust_srcs",
    ] + glob(["src/**"]),
    outs = ["cargo_metadata.json"],
    cmd = "RUSTC=$(location //:rustc) $(location //:cargo) metadata --offline > $(location cargo_metadata.json)",
    tools = [
        "//:cargo",
        "//:rustc",
    ]
)

genrule(
    name = "crustls_h",
    srcs = [
        "//:cargo_metadata",
        "cbindgen.toml",
        "Cargo.toml",
        "Cargo.lock",
        "//src:rust_srcs",
    ] + glob(["src/**"]),
    outs = ["crustls.h"],
    cmd = "PATH=$$PATH:$(location //:cargo) $(location //:cargo_bin_cbindgen) --lockfile $(location Cargo.lock) --metadata $(location //:cargo_metadata) --config $(location //:cbindgen.toml) --lang C > $(location crustls.h)",
    tools = [
        "//:cargo_bin_cbindgen",
        "//:cargo",
    ],
)

alias(
    name = "cargo",
    actual = select({
        "@rules_rust//rust/platform:aarch64-apple-darwin": "@rust_darwin_aarch64//:cargo",
        "@rules_rust//rust/platform:aarch64-unknown-linux-gnu": "@rust_linux_aarch64//:cargo",
        "@rules_rust//rust/platform:x86_64-apple-darwin": "@rust_darwin_x86_64//:cargo",
        "@rules_rust//rust/platform:x86_64-pc-windows-msvc": "@rust_windows_x86_64//:cargo",
        "@rules_rust//rust/platform:x86_64-unknown-linux-gnu": "@rust_linux_x86_64//:cargo",
    }),
)

alias(
    name = "rustc",
    actual = select({
        "@rules_rust//rust/platform:aarch64-apple-darwin": "@rust_darwin_aarch64//:rustc",
        "@rules_rust//rust/platform:aarch64-unknown-linux-gnu": "@rust_linux_aarch64//:rustc",
        "@rules_rust//rust/platform:x86_64-apple-darwin": "@rust_darwin_x86_64//:rustc",
        "@rules_rust//rust/platform:x86_64-pc-windows-msvc": "@rust_windows_x86_64//:rustc",
        "@rules_rust//rust/platform:x86_64-unknown-linux-gnu": "@rust_linux_x86_64//:rustc",
    }),
)
